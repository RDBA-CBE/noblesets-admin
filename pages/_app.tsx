import type { AppProps } from 'next/app';
import { ReactElement, ReactNode, Suspense, useEffect } from 'react';
import DefaultLayout from '../components/Layouts/DefaultLayout';
import { Provider } from 'react-redux';
import store from '../store/index';
import Head from 'next/head';

import { appWithI18Next } from 'ni18n';
import { ni18nConfig } from 'ni18n.config.ts';
import { setContext } from '@apollo/client/link/context';

// Perfect Scrollbar
import 'react-perfect-scrollbar/dist/css/styles.css';

import '../styles/tailwind.css';
import { NextPage } from 'next';
import { ApolloClient, ApolloLink, ApolloProvider, InMemoryCache, createHttpLink } from '@apollo/client';
import { onError } from '@apollo/client/link/error';
import { useRouter } from 'next/router'; // Add this
import { useMemo } from 'react';

export type NextPageWithLayout<P = {}, IP = P> = NextPage<P, IP> & {
    getLayout?: (page: ReactElement) => ReactNode;
};

type AppPropsWithLayout = AppProps & {
    Component: NextPageWithLayout;
};

const App = ({ Component, pageProps }: AppPropsWithLayout) => {
    const router = useRouter(); // Get Next.js router

    const client = useMemo(() => {
        const httpLink = createHttpLink({
            uri: 'https://noble.irepute.in/graphql/',
        });

        const authLink = new ApolloLink((operation, forward) => {
            const token = typeof window !== 'undefined' ? localStorage.getItem('adminToken') : null;

            operation.setContext({
                headers: {
                    Authorization: token ? `JWT ${token}` : '',
                    'Content-Type': 'application/json',
                },
            });

            return forward(operation);
        });

        const errorLink = onError(({ graphQLErrors, networkError }) => {
            if (graphQLErrors) {
                for (let err of graphQLErrors) {
                    if (
                        err.message === 'Invalid token. User does not exist or is inactive.'
                    ) {
                        localStorage.removeItem('adminToken'); // optional
                        router.push('/login'); // Redirect to login
                    }
                }
            }

            if (networkError) {
                console.error(`[Network error]: ${networkError}`);
            }
        });

        return new ApolloClient({
            link: ApolloLink.from([errorLink, authLink, httpLink]),
            cache: new InMemoryCache(),
        });
    }, [router]);

    const getLayout = Component.getLayout ?? ((page) => <DefaultLayout>{page}</DefaultLayout>);

    return (
        <ApolloProvider client={client}>
            <Provider store={store}>
                <Head>
                    <title>NOBEL SETS - Admin</title>
                    <meta charSet="UTF-8" />
                    <meta httpEquiv="X-UA-Compatible" content="IE=edge" />
                    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="/favicon.png" />
                </Head>

                {getLayout(<Component {...pageProps} />)}
            </Provider>
        </ApolloProvider>
    );
};

export default appWithI18Next(App, ni18nConfig);
